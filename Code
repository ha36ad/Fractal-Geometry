from gi.repository import Gtk
from random import randint
import cairo
import math
import turtle
tt=turtle.Turtle()
#tree
#main function:
def recursion(length):
    if length<10:
        return
    else:
        tt.forward(length)
        tt.left(30)
        recursion(3*length/4)
        tt.right(60)
        recursion(3*length/4)
        tt.left(30)
        tt.backward(length)
recursion(100)
#dragon curve
limit = 1
#left and right
left = 'l'
right = 'r'
#axiom
intial = right
new = intial
#ask user for input
iteration = int(input("Enter # of iterations : "))
length = int(input("Enter length of each segment : "))
#rules:
while limit<iteration: 
        new = intial + right
        intial = intial[:: -1]
        for i in range(0, len(intial)):  
                if intial[i] == right:
                        intial = (intial[:i])+ (left) + (intial[i + 1:]) 
                elif intial[i] == left:
                        intial = (intial[:i]) + (right) + (intial[i + 1:])                                                              
        new = (new) + (intial)  
        intial = new                                     
        limit += 1
#turtle
turtle.ht() 
turtle.speed(0)  
turtle.color="blue"  
turtle.bgcolor="green"
turtle.forward(length)
tt=turtle.Turtle()
#main function
for i in range(0, len(new)):  
    if new[i] == (right):  
        turtle.right(90)  
        turtle.forward(length) 
    elif new[i] == (left):     
        turtle.left(90) 
        turtle.forward(length) 
#Koch Curve
def flake(length, limit):
    if limit == 0:
        turtle.forward(length)
        return
    length /= 3.00
    flake(length, limit-1)
    turtle.left(60)
    flake(length, limit-1)
    turtle.right(120)
    flake(length, limit-1)
    turtle.left(60)
    flake(length, limit-1)
#turtle
turtle.speed(0)
length=300.0
turtle.backward(length/2)
#replication
for i in range(6):
    flake(length, 7)
    turtle.right(120)
#hilbert II curve
def hilbert (length,rule, limit):
    if limit == 0:
     a = hilbert(length, "a" , limit-1)
     b = hilbert(length, "b" , limit-1)
     l = turtle.left(90)
     r = turtle.right(90)
     f = turtle.forward(length)
     if rule == "a":
         l(); b(); f(); r(); f(); a(); r(); f(); b(); l();
     if rule == "b":
         r; a(); f(); l(); b(); f(); b(); l(); f(); a(); r();    
#turtle
t = turtle.Turtle()
turtle.speed(0)
hilbert(5,"a",5)
#pattern using ellipses
class Window (Gtk.Window):
    def __init__(self):
        super(Window, self).__init__()
        self.init_ui()        
    def init_ui(self):    
        darea = Gtk.DrawingArea()
        darea.connect("draw", self.on_draw)
        self.add(darea)
        self.set_title("GTK window")
        self.resize(737, 497)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.connect("delete-event", Gtk.main_quit)
        self.show_all()
    def on_draw(self, wid, cr):
        width = 737
        height = 497
        cr.translate(width/3, height/3)
        cr.arc(0, 0, 120, 0, 2*math.pi)
        cr.stroke()        
        for i in range(50):
         x = randint(0,255)/255
         y = randint(0,255)/255
         z = randint(0,255)/255
         cr.save()
         cr.rotate(i*math.pi/50)
         cr.scale(0.5, 1.3)
         cr.arc(0, 0, 120, 0, 2*math.pi)
         cr.set_source_rgb(x, y, z)
         cr.stroke()
         cr.restore()
        for f in range(50):
            x = randint(0,255)/255
            y = randint(0,255)/255
            z = randint(0,255)/255         
            cr.save()
            cr.rotate(i*math.pi/50)
            cr.scale(0.2, 1.3)
            cr.arc(0, 0, 120, 0, 2*math.pi)
            cr.set_source_rgb(x, y, z)
            cr.stroke()
            cr.restore() 
       for g in range(50):
           x = randint(0,255)/255
           y = randint(0,255)/255
           z = randint(0,255)/255         
           cr.save()
           cr.rotate(g*math.pi/50)
           cr.set_source_rgb (x,y,z)
           cr.scale(0.6, 0.6)
           cr.rectangle(450,450,480,480)
           cr.fill()
       for h in range (50):
           x = randint(0,255)/255
           y = randint(0,255)/255
           z = randint(0,255)/255
           cr.translate(width/3, height/3)
           cr.save()
           cr.rotate(-(h*math.pi/50))
           cr.set_source_rgb (x,y,z)
           cr.scale(0.6, 0.6)
           cr.rectangle(490,490,520,520)
           cr.fill()   
def main():
    app = Window()
    Gtk.main()
if __name__ == "__main__":    
    main()
                  

                  
        
        
  
